---
type Lang = "es" | "en";

const menuItems: Record<Lang, { label: string; href: string }[]> = {
    es: [
        { label: "Inicio", href: "/es/" },
        { label: "Tours", href: "/es/tours" },
        { label: "Nosotros", href: "/es/nosotros" },
        { label: "Contacto", href: "/es/contacto" },
    ],
    en: [
        { label: "Home", href: "/en/" },
        { label: "Tours", href: "/en/tours" },
        { label: "About Us", href: "/en/about" },
        { label: "Contact", href: "/en/contact" },
    ],
};

const path = Astro.url.pathname;
const currentLang: Lang = path.startsWith("/en") ? "en" : "es";

function computeLangToggleHref(p: string, lang: Lang) {
    return lang === "es"
        ? p.startsWith("/es") ? p.replace(/^\/es/, "/en") : `/en${p}`
        : p.startsWith("/en") ? p.replace(/^\/en/, "/es") : `/es${p}`;
}
const langToggleHref = computeLangToggleHref(path, currentLang);
---

<nav id="navbar" class="fixed top-0 left-0 w-full bg-transparent backdrop-blur-md border-b border-transparent shadow-sm z-50 transition-all duration-300">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
            <!-- Logo -->
            <a href={menuItems[currentLang][0].href} class="flex items-center space-x-3 group">
                <img src="/logo.png" alt="Cusco Travel Perú" class="h-10 w-auto transition-transform duration-300 group-hover:scale-105">
            </a>

            <!-- Menú desktop -->
            <div class="hidden md:flex items-center space-x-6">
                {menuItems[currentLang].map(({ label, href }) => (
                    <a href={href} class="nav-link relative hover:text-amber-500 transition font-medium after:content-[''] after:block after:w-0 after:h-[2px] after:bg-amber-500 after:transition-all hover:after:w-full">
                        {label}
                    </a>
                ))}
            </div>

            <!-- Acciones (desktop) -->
            <div class="hidden md:flex items-center space-x-3">
                <a href={langToggleHref} class="nav-link px-3 py-1 border border-amber-500 rounded-lg hover:bg-amber-500 hover:text-white transition flex items-center space-x-2 shadow-sm">
                    <span>{currentLang === "es" ? "🇬🇧" : "🇪🇸"}</span>
                    <span class="font-bold">{currentLang === "es" ? "EN" : "ES"}</span>
                </a>
            </div>

            <!-- Botón menú móvil -->
            <button id="menu-button" type="button" class="md:hidden inline-flex items-center justify-center p-2 rounded-md nav-link hover:bg-gray-200 focus:outline-none" aria-controls="mobile-menu" aria-expanded="false">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                    <path d="M4 6h16M4 12h16M4 18h16"/>
                </svg>
                <span class="sr-only">Abrir menú</span>
            </button>
        </div>
    </div>

    <!-- Menú móvil -->
    <div id="mobile-menu" class="hidden md:hidden flex-col px-4 pb-4 space-y-3 bg-white/95 border-t border-gray-200 shadow-inner">
        {menuItems[currentLang].map(({ label, href }) => (
            <a href={href} class="block text-gray-700 font-medium hover:text-amber-600 transition py-2 border-b border-gray-100">
                {label}
            </a>
        ))}

        <!-- Selector de idioma móvil -->
        <a href={langToggleHref} class="mt-2 inline-flex w-max items-center space-x-2 px-3 py-1 border border-amber-600 rounded-lg hover:bg-amber-600 hover:text-white transition shadow-sm">
            <span>{currentLang === "es" ? "🇬🇧" : "🇪🇸"}</span>
            <span class="font-bold">{currentLang === "es" ? "EN" : "ES"}</span>
        </a>
    </div>
</nav>

<script is:inline>
    const navbar = document.getElementById("navbar");
    const btn = document.getElementById("menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const navLinks = document.querySelectorAll(".nav-link");

    function updateNavbar() {
        const scrolled = window.scrollY > 50;

        // Fondo y borde del navbar
        navbar.classList.toggle("nav-scrolled", scrolled); // Aplica la clase global
        navbar.classList.toggle("border-gray-200", scrolled);
        navbar.classList.toggle("shadow-md", scrolled);
        navbar.classList.toggle("bg-transparent", !scrolled);
        navbar.classList.toggle("border-transparent", !scrolled);

        // Colores de texto de links y botones
        navLinks.forEach(link => {
            link.classList.toggle("text-gray-900", scrolled);
            link.classList.toggle("text-white", !scrolled);
        });
    }

    window.addEventListener("scroll", updateNavbar);
    window.addEventListener("load", updateNavbar); // asegura estado inicial

    // Menú móvil
    if (btn && mobileMenu) {
        btn.addEventListener("click", () => {
            const isHidden = mobileMenu.classList.contains("hidden");
            mobileMenu.classList.toggle("hidden", !isHidden);
            mobileMenu.classList.toggle("flex", isHidden);
            btn.setAttribute("aria-expanded", isHidden.toString());
        });

        mobileMenu.querySelectorAll("a").forEach((link) => {
            link.addEventListener("click", () => {
                mobileMenu.classList.add("hidden");
                mobileMenu.classList.remove("flex");
                btn.setAttribute("aria-expanded", "false");
            });
        });
    }
</script>